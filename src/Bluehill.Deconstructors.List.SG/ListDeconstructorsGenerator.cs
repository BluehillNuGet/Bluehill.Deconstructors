using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace Bluehill.Deconstructors;

[Generator]
[ExcludeFromCodeCoverage]
public sealed class ListDeconstructorsGenerator : IIncrementalGenerator {
    public void Initialize(IncrementalGeneratorInitializationContext context) =>
        context.RegisterPostInitializationOutput(c => {
            StringBuilder sourceCode = new(30720);

            sourceCode.AppendLine("""
                // Do not edit this file directly!!!!!
                namespace Bluehill.Deconstructors;

                [EditorBrowsable(EditorBrowsableState.Never)]
                public static class ListDeconstructors {
                """);

            for (var i1 = 1; i1 <= 30; i1++) {
                sourceCode.Append("""
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        public static void Deconstruct<T>(this IList<T> list
                    """);

                for (var i2 = 1; i2 <= i1; i2++) {
                    sourceCode.Append($", out T item{i2}");
                }

                sourceCode.AppendLine(") {");

                for (var i2 = 1; i2 <= i1; i2++) {
                    sourceCode.AppendLine($"""
                                item{i2} = list[{i2 - 1}];
                        """);
                }

                sourceCode.AppendLine("""
                        }

                    """);
            }

            sourceCode.AppendLine("}");

            c.AddSource("ListDeconstructors.g.cs", SourceText.From(sourceCode.ToString(), Encoding.UTF8));
        });
}
