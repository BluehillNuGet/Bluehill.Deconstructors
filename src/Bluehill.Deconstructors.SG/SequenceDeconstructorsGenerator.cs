using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace Bluehill.Deconstructors;

[ExcludeFromCodeCoverage]
public abstract class SequenceDeconstructorsGenerator : IIncrementalGenerator {
    public abstract void Initialize(IncrementalGeneratorInitializationContext context);

    protected static void Generate(IncrementalGeneratorInitializationContext context, SequenceType sequenceType) {
        var seqVarName = sequenceType switch {
            SequenceType.List => "list",
            SequenceType.Span => "span",
            SequenceType.ReadOnlySpan => "readOnlySpan",
            _ => throw new NotImplementedException()
        };

        context.RegisterPostInitializationOutput(c => {
            StringBuilder sourceCode = new(30720);

            sourceCode.AppendLine($$"""
                // Do not edit this file directly!!!!!
                namespace Bluehill.Deconstructors;

                [EditorBrowsable(EditorBrowsableState.Never)]
                public static class {{sequenceType}}Deconstructors {
                """);

            for (var i1 = 1; i1 <= 30; i1++) {
                sourceCode.Append($"""
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        public static void Deconstruct<T>(this {sequenceType switch { SequenceType.List => "IList", SequenceType.Span => "Span", SequenceType.ReadOnlySpan => "ReadOnlySpan", _ => throw new NotImplementedException() }}<T> {seqVarName}
                    """);

                for (var i2 = 1; i2 <= i1; i2++) {
                    sourceCode.Append($", out T item{i2}");
                }

                sourceCode.AppendLine(") {");

                for (var i2 = 1; i2 <= i1; i2++) {
                    sourceCode.AppendLine($"""
                                item{i2} = {seqVarName}[{i2 - 1}];
                        """);
                }

                sourceCode.AppendLine("""
                        }

                    """);
            }

            sourceCode.AppendLine("}").AppendLine();

            c.AddSource($"{sequenceType}Deconstructors.g.cs", SourceText.From(sourceCode.ToString(), Encoding.UTF8));
        });
    }
}
